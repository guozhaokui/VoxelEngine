export declare class Earcut {
    static earcut(data: any, holeIndices: any, dim: any): any;
    static linkedList(data: any, start: any, end: any, dim: any, clockwise: any): any;
    static filterPoints(start: any, end: any): any;
    static earcutLinked(ear: any, triangles: any, dim: any, minX: any, minY: any, invSize: any, pass?: any): any;
    static isEar(ear: any): any;
    static isEarHashed(ear: any, minX: any, minY: any, invSize: any): boolean;
    static cureLocalIntersections(start: any, triangles: any, dim: any): any;
    static splitEarcut(start: any, triangles: any, dim: any, minX: any, minY: any, invSize: any): void;
    static eliminateHoles(data: any, holeIndices: any, outerNode: any, dim: any): any;
    static compareX(a: any, b: any): any;
    static eliminateHole(hole: any, outerNode: any): void;
    static findHoleBridge(hole: any, outerNode: any): any;
    static indexCurve(start: any, minX: any, minY: any, invSize: any): void;
    static sortLinked(list: any): any;
    static zOrder(x: any, y: any, minX: any, minY: any, invSize: any): any;
    static getLeftmost(start: any): any;
    static pointInTriangle(ax: any, ay: any, bx: any, by: any, cx: any, cy: any, px: any, py: any): boolean;
    static isValidDiagonal(a: any, b: any): boolean;
    static area(p: any, q: any, r: any): any;
    static equals(p1: any, p2: any): boolean;
    static intersects(p1: any, q1: any, p2: any, q2: any): boolean;
    static intersectsPolygon(a: any, b: any): boolean;
    static locallyInside(a: any, b: any): boolean;
    static middleInside(a: any, b: any): boolean;
    static splitPolygon(a: any, b: any): any;
    static insertNode(i: any, x: any, y: any, last: any): any;
    static removeNode(p: any): void;
    static signedArea(data: any, start: any, end: any, dim: any): any;
}
